import { app, BrowserWindow, Tray, Menu, nativeImage, shell, nativeTheme } from 'electron';
import icons from "./icons.json";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let contextMenu : Menu;
let tray : Tray;

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 79,
    width: 370,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    },
    alwaysOnTop: true,
    title: "SFMS Bell Schedule",
    show: false,
    autoHideMenuBar: true,
    titleBarStyle: "hidden",
    focusable: false,
    maximizable: false,
    closable: true,
    minimizable: false,
    hasShadow: false,
    maxHeight: 79,
    minHeight: 79,
    minWidth: 370
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  
  // Set the opacity of the app.
  mainWindow.setOpacity(0.7);

  // Open the DevTools.
  // Comment in a prod release.
   mainWindow.webContents.openDevTools();

  mainWindow.once('ready-to-show', () => {
    mainWindow.showInactive()
  });

  let theme = "light";
  if (nativeTheme.shouldUseDarkColors){
    theme = "dark";
  }

  // @ts-ignore
  const updateIcon = nativeImage.createFromDataURL(icons[theme].updateIcon);
  // @ts-ignore
  const reopenIcon = nativeImage.createFromDataURL(icons[theme].reopenIcon);
  // @ts-ignore
  const openInBrowserIcon = nativeImage.createFromDataURL(icons[theme].openInBrowserIcon);
  // @ts-ignore
  const bugReportIcon = nativeImage.createFromDataURL(icons[theme].bugReportIcon);
  // @ts-ignore
  const closeIcon = nativeImage.createFromDataURL(icons[theme].closeIcon);
  // @ts-ignore
  const infoIcon = nativeImage.createFromDataURL(icons[theme].infoIcon);

  // disable right click menu on move region
  const WM_INITMENU = 0x0116;
  mainWindow.hookWindowMessage(WM_INITMENU, () => {
    mainWindow.setEnabled(false);
    mainWindow.setEnabled(true);
  });

  const icon = nativeImage.createFromDataURL(icons.appIcon);

  tray = new Tray(icon);
  contextMenu = Menu.buildFromTemplate([
    { label: "SFMS Bell Schedule", type: "normal", enabled: false, id: "title", icon: infoIcon},
    { type: "separator" },
    { label: 'Reopen Window', type: 'normal', click: () => {mainWindow.close(); tray.destroy(); createWindow();}, id: "reopenWindowButton", icon: reopenIcon },
    { label: 'Open SFMS Bell Schedule Website', type: 'normal', click: () => {siteOpen();}, id: 'siteButton' , icon: openInBrowserIcon},
    { label: 'Quit', type: 'normal', click: () => {app.quit()}, id: "quitButton", icon: closeIcon }
  ]);
  tray.setToolTip('SFMS Bell Schedule');
  tray.setContextMenu(contextMenu);
};

const siteOpen = (): void => {
  shell.openExternal("https://sanford.croomssched.tech/")
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});